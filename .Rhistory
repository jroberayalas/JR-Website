prior = c(set_prior("normal(178,100)", class = "Intercept"),
set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 41000, warmup = 40000, cores = 4)
posterior_samples(m4.4) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.4) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
d3 <- d2 %>%
mutate(weight.c = weight - mean(weight))
m4.4 <- brm(height ~ 1 + weight.c,
data = d3,
family = gaussian(), # default
prior = c(set_prior("normal(178,100)", class = "Intercept"),
set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 41000, warmup = 40000, cores = 4)
plot(m4.4)
posterior_samples(m4.4) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.4) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
pairs(m4.4)
pairs(m4.3)
?fixef
summary(m4.4)
?summary.brmsfit
summary(m4.4)
fixef(m4.4)
head(d3)
fixef(m4.3)[1]
fixef(m4.3)[2]
d2 %>%
ggplot(aes(x = weight, y = height)) +
theme_bw() +
geom_abline(intercept = fixef(m4.3)[1],
slope = fixef(m4.3)[2]) +
geom_point(shape = 1, size = 2, color = "royalblue") +
theme(panel.grid = element_blank())
install.packages("HDInterval")
install.packages("HDInterval")
fitted(m4.3, summary = F)
fitted(m4.3, summary = T)
m4.3
mu <- fitted(m4.3, summary = F)
str(mu)
m4.2
m4.3
head(fitted(m4.3, summary = T))
dim(fitted(m4.3, summary = T))
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
mu <- fitted(m4.3,
summary = F,
newdata = weight_seq)
mu
mu <- fitted(m4.3,
summary = F,
newdata = weight_seq) %>%
as.tibble() %>%
mutate(Iter = 1:4000)
mu
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
mu <- fitted(m4.3,
summary = F,
newdata = weight_seq) %>%
as.tibble() %>%
mutate(Iter = 1:4000) %>%
select(Iter, everything())
?walk
mu <- fitted(m4.3,
summary = F,
newdata = weight_seq) %>%
as.tibble() %>%
mutate(Iter = 1:4000) %>%
select(Iter, everything()) %>%
walk(glimpse)
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
mu <- fitted(m4.3,
summary = F,
newdata = weight_seq) %>%
as.tibble() %>%
mutate(Iter = 1:4000) %>%
select(Iter, everything()) %>%
walk(glimpse)
mu
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
muSummary
?geom_ribbon
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
head(d2)
d2 %>%
ggplot(aes(x = weight, y = height))
d2 %>%
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(muSummary,
aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70")
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate))
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey50") +
geom_line(data = muSummary,
aes(y = Estimate))
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey50") +
geom_line(data = muSummary,
aes(y = Estimate)) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight.seq) %>%
as_tibble() %>%
bind_cols(weight_seq)
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
color = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
?posterior_samples
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F, probs = 0.89)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
?predict
?predict.brmsfit
?fitted.brmsfit
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
pred_height
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
pred_height
pred_height
blogdown:::serve_site()
blogdown:::serve_site()
d
posterior_samples(m4.4) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.4) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
pairs(m4.4)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5)
d <-
d %>%
mutate(weight.s = (weight - mean(weight))/sd(weight),
weight.s2 = weight.s^2)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5)
m4.5 <- brm(height ~ 1 + weight.s + I(weight.s^2),
data = d,
prior = c(set_prior("normal(178,100)", class = "Intercept"),
set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4)
plot(m4.5)
posterior_samples(m4.5) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.5) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
pairs(m4.5)
weight_seq <- data.frame(weight.s = seq(from = -2.2, to = 2, length.out = 30))
muSummary <- fitted(m4.5,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
pred_height <- predict(m4.5,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# Correct the x scale
at <- c(-2, -1, 0, 1, 2)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank()) +
# Here it is!
scale_x_continuous(breaks = at,
labels = round(at*sd(d$weight) + mean(d$weight), 1))
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(data = growth, aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(.1)
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
?round
x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
