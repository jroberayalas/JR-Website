blogdown:::serve_site()
blogdown:::new_post_addin()
bookdown:::mathquill()
options(blogdown.author = "Jos√© Roberto Ayala Solares")
blogdown:::serve_site()
blogdown::hugo_version()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
install.packages("brms")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
mtext( "20 points" )
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
# define prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
# define prior
prior <- exp( -5*abs( p_grid - 0.5 ) )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
plot( p_grid , prior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
devtools::install_github("brooke-watson/BRRR")
library(BRRR)
# play a simple rap adlib in R
skrrrahh()
f <- function(sound, sleep = 0.75) {
Sys.sleep(sleep)
BRRR::skrrrahh(sound)
}
## WARNING: THIS WILL MAKE SOUND!!!!
for(i in 1:5) {
f(i)
}
purrr::walk(30:35, f)
purrr::walk(30:35, f)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
rethinking::plotpost(w)
?rethinking::dens
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
rethinking::dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
set.seed(1000)
replicate(100, runif(16, -1, 1))
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
library(tidyverse)
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .)
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step)
poa
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value))
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos
pos %>%
filter(step == 4) %>%
ggplot(aes(x = position)) +
geom_line(stat = "density", color = "dodgerblue1") +
coord_cartesian(xlim = -6:6) +
labs(title = "4 steps")
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble()
growth
log.big <-
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble()
log.big <-
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble()
log.big
blogdown:::serve_site()
?expression
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
library(tidyverse)
set.seed(1000)
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos %>%
filter(step == 16) %>%
ggplot(aes(x = position)) +
geom_density(color = "dodgerblue1") + #geom_line(stat = "density", color = "dodgerblue1") +
coord_cartesian(xlim = -6:6) +
labs(title = "16 steps")
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble()
ggplot(data = growth, aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(12)
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
# Load data from the rethinking package
library(rethinking)
data(Howell1)
d <- Howell1
# Have a look at the data
d %>% glimpse()
# Filter heights of adults in the sample. The reason to filter out non-adults is that height is strongly correlated with age, before adulthood.
d2 <- d %>% filter(age >= 18) %>% glimpse()
d2 %>%
ggplot(aes(x = height)) +
geom_density()
mu.list <- seq( from=140, to=160 , length.out=200 )
sigma.list <- seq( from=4 , to=9 , length.out=200 )
post <- expand.grid( mu=mu.list , sigma=sigma.list )
post$LL <- sapply( 1:nrow(post) , function(i) sum( dnorm(
d2$height ,
mean=post$mu[i] ,
sd=post$sigma[i] ,
log=TRUE ) ) )
post$prod <- post$LL + dnorm( post$mu , 178 , 20 , TRUE ) +
dunif( post$sigma , 0 , 50 , TRUE )
post$prob <- exp( post$prod - max(post$prod) )
rethinking::contour_xyz( post$mu , post$sigma , post$prob )
d3 <- sample( d2$height , size=20 )
mu.list <- seq( from=150, to=170 , length.out=200 )
sigma.list <- seq( from=4 , to=20 , length.out=200 )
post2 <- expand.grid( mu=mu.list , sigma=sigma.list )
post2$LL <- sapply( 1:nrow(post2) , function(i)
sum( dnorm( d3 , mean=post2$mu[i] , sd=post2$sigma[i] ,
log=TRUE ) ) )
post2$prod <- post2$LL + dnorm( post2$mu , 178 , 20 , TRUE ) +
dunif( post2$sigma , 0 , 50 , TRUE )
post2$prob <- exp( post2$prod - max(post2$prod) )
sample2.rows <- sample( 1:nrow(post2) , size=1e4 , replace=TRUE ,
prob=post2$prob )
sample2.mu <- post2$mu[ sample2.rows ]
sample2.sigma <- post2$sigma[ sample2.rows ]
plot( sample2.mu , sample2.sigma , cex=0.5 ,
col=col.alpha(rangi2,0.1) ,
xlab="mu" , ylab="sigma" , pch=16 )
dens( sample2.sigma , norm.comp=TRUE )
blogdown:::serve_site()
?brm
?brm
?brms::brm
library(tidyverse)
set.seed(1000)
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos %>%
filter(step == 16) %>%
ggplot(aes(x = position)) +
geom_density(color = "dodgerblue1") + #geom_line(stat = "density", color = "dodgerblue1") +
coord_cartesian(xlim = -6:6) +
labs(title = "16 steps")
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble()
ggplot(data = growth, aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(12)
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
# Load data from the rethinking package
library(rethinking)
data(Howell1)
d <- Howell1
# Have a look at the data
d %>% glimpse()
# Filter heights of adults in the sample. The reason to filter out non-adults is that height is strongly correlated with age, before adulthood.
d2 <- d %>% filter(age >= 18) %>% glimpse()
d2 %>%
ggplot(aes(x = height)) +
geom_density()
# Plot prior for mu
prior_mu <- ggplot(data = tibble(x = seq(from = 100, to = 250, by = .1)),
aes(x = x, y = dnorm(x, mean = 178, sd = 20))) +
geom_line() +
xlab(expression(mu)) +
ylab("density")
# Plot prior for sigma
prior_sigma <- ggplot(data = tibble(x = seq(from = -10, to = 60, by = 1)),
aes(x = x, y = dunif(x, min = 0, max = 50))) +
geom_line() +
scale_y_continuous(NULL, breaks = NULL) +
xlab(expression(sigma))
# Plot heights by sampling from the prior
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
heights <- tibble(x = rnorm(1e4, sample_mu, sample_sigma)) %>%
ggplot(aes(x = x)) +
geom_density() +
scale_y_continuous(NULL, breaks = NULL) +
xlab("h")
library(gridExtra)
grid.arrange(prior_mu, prior_sigma, heights, ncol=3)
# Detach rethinking package
detach(package:rethinking, unload = T)
# Load brms
library(brms)
m4.1 <- brm(data = d2, family = gaussian(),
height ~ 1,
prior = c(set_prior("normal(178, 20)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4)
plot(m4.1)
launch_shiny(m4.1)
brm::launch_shiny(m4.1)
install.packages("qlcData")
launch_shiny(m4.1)
print(m4.1)
summary(m4.1)
?summary.brmsfit
summary(m4.1, prob = 0.89)
post <- posterior_samples(m4.1)
post
?brms::posterior_samples
dim(post)
post <- posterior_samples(m4.1)
t(apply(post[ , 1:2], 2, quantile, probs = c(.5, .055, .945)))
# The rethinking package has already a function to summarise the samples
rethinking::precis(post[ , 1:2])
post %>%
select(-lp__) %>%
gather(parameter)
post %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945))
post %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
post %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945))
# Using the tidyverse for summarising
post %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
blogdown:::serve_site()
m4.3 <- brm(height ~ 1 + weight,
data = d2,
family = gaussian(),
prior = c(set_prior("normal(178,100)", class = "Intercept"),
set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 41000, warmup = 40000, cores = 4)
