blogdown:::serve_site()
blogdown:::new_post_addin()
bookdown:::mathquill()
options(blogdown.author = "Jos√© Roberto Ayala Solares")
blogdown:::serve_site()
blogdown::hugo_version()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
install.packages("brms")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
mtext( "20 points" )
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
# define prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
# define prior
prior <- exp( -5*abs( p_grid - 0.5 ) )
# compute likelihood at each value in grid
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
plot( p_grid , prior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
devtools::install_github("brooke-watson/BRRR")
library(BRRR)
# play a simple rap adlib in R
skrrrahh()
f <- function(sound, sleep = 0.75) {
Sys.sleep(sleep)
BRRR::skrrrahh(sound)
}
## WARNING: THIS WILL MAKE SOUND!!!!
for(i in 1:5) {
f(i)
}
purrr::walk(30:35, f)
purrr::walk(30:35, f)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
rethinking::plotpost(w)
?rethinking::dens
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
rethinking::dens( replicate( 10000 , prod( 1 + runif(12,0,0.1) ) ) , norm.comp=TRUE )
set.seed(1000)
replicate(100, runif(16, -1, 1))
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
library(tidyverse)
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble()
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .)
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step)
poa
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value))
pos
pos <-
replicate(100, runif(16, -1, 1)) %>%        # Here's the simulation
as_tibble() %>%                             # For data manipulation, we'll make this a tibble
rbind(0, .) %>%                             # Here we add a row of zeros above the simulation results
mutate(step = 0:16) %>%                     # This adds our step index
gather(key, value, -step) %>%               # Here we convert the data to the long format
mutate(person = rep(1:100, each = 17)) %>%  # This adds a person id index
# The next two lines allows us to make culmulative sums within each person
group_by(person) %>%
mutate(position = cumsum(value)) %>%
ungroup()  # Ungrouping allows for further data manipulation
pos
pos %>%
filter(step == 4) %>%
ggplot(aes(x = position)) +
geom_line(stat = "density", color = "dodgerblue1") +
coord_cartesian(xlim = -6:6) +
labs(title = "4 steps")
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble()
growth
log.big <-
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble()
log.big <-
replicate(10000, log(prod(1 + runif(12,0,0.5)))) %>%
as_tibble()
log.big
blogdown:::serve_site()
?expression
blogdown:::serve_site()
