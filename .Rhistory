geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F, probs = 0.89)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
?predict
?predict.brmsfit
?fitted.brmsfit
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
pred_height
# When you specify summary = F, fitted() returns a matrix of values with as many rows as there were post-warmup iterations across your HMC chains and as many columns as there were cases in your analysis.
mu <- fitted(m4.3, summary = F)
# Plot regression line and its intervals
weight_seq <- tibble(weight = seq(from = 25, to = 70, by = 1))
muSummary <- fitted(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq) %>%
walk(head)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# The summary information in our data frame is for simulated heights, not distributions of plausible average height, $\mu$
pred_height <- predict(m4.3,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d2 %>%
ggplot(aes(x = weight, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
pred_height
pred_height
blogdown:::serve_site()
blogdown:::serve_site()
d
posterior_samples(m4.4) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.4) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
pairs(m4.4)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5)
d <-
d %>%
mutate(weight.s = (weight - mean(weight))/sd(weight),
weight.s2 = weight.s^2)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_point(color = "navyblue", shape = 1, size = 1.5)
m4.5 <- brm(height ~ 1 + weight.s + I(weight.s^2),
data = d,
prior = c(set_prior("normal(178,100)", class = "Intercept"),
set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4)
plot(m4.5)
posterior_samples(m4.5) %>%
select(-lp__) %>%
gather(parameter) %>%
group_by(parameter) %>%
summarise(mean = mean(value),
SD   = sd(value),
`5.5_percentile`  = quantile(value, probs = .055),
`94.5_percentile` = quantile(value, probs = .945)) %>%
mutate_if(is.numeric, round, digits = 2)
posterior_samples(m4.5) %>%
select(-lp__) %>%
cor() %>%
round(digits = 2)
pairs(m4.5)
weight_seq <- data.frame(weight.s = seq(from = -2.2, to = 2, length.out = 30))
muSummary <- fitted(m4.5,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
pred_height <- predict(m4.5,
newdata = weight_seq,
probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(weight_seq)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank())
# Correct the x scale
at <- c(-2, -1, 0, 1, 2)
d %>%
ggplot(aes(x = weight.s, y = height)) +
geom_ribbon(data = pred_height,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey83") +
geom_ribbon(data = muSummary,
aes(y = Estimate, ymin = `5.5%ile`, ymax = `94.5%ile`),
fill = "grey70") +
geom_line(data = muSummary,
aes(y = Estimate),
color = "red") +
geom_point(color = "navyblue", shape = 1, size = 1.5, alpha = 2/3) +
theme(text = element_text(family = "Times"),
panel.grid = element_blank()) +
# Here it is!
scale_x_continuous(breaks = at,
labels = round(at*sd(d$weight) + mean(d$weight), 1))
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(data = growth, aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(.1)
growth <-
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
set.seed(.1)
replicate(10000, prod(1 + runif(12, 0, 0.1))) %>%
as_tibble() %>%
ggplot(aes(x = value)) +
geom_density(color = "dodgerblue1")
?round
x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
?rstan::rstan_options
rstan::rstan_options(auto_write = T)
blogdown:::new_post_addin()
install.packages("reticulate")
library(reticulate)
os <- import("os")
Sys.which("python")
os$listdir(".")
py$titanic
py$titanic
library(ggplot)
library(ggplot2)
ggplot(py$titanic, aes(x = age)) +
geom_hist()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
?blogdown::shortcode
blogdown:::serve_site()
library(rethinking)
data(WaffleDivorce)
d <- WaffleDivorce
rm(WaffleDivorce)
detach(package:rethinking, unload = T)
library(brms)
library(tidyverse)
glimpse(d)
d <-
d %>%
mutate(Marriage.s = (Marriage - mean(Marriage))/sd(Marriage),
MedianAgeMarriage.s = (MedianAgeMarriage - mean(MedianAgeMarriage))/sd(MedianAgeMarriage))
m5.3 <- brm(Divorce ~ 1 + Marriage.s + MedianAgeMarriage.s,
data = d,
prior = c(set_prior("normal(10,10)", class = "Intercept"),
set_prior("normal(0,1)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
summary(m5.3, prob = 0.89)
stanplot(m5.3)
post <- posterior_samples(m5.3)
bayesplot::color_scheme_set("red")
bayesplot::mcmc_intervals(post[, 1:4],
prob = .5,
point_est = "median") +
labs(title = "Coefficient plot") +
theme(axis.text.y = element_text(hjust = 0),
axis.line.x = element_line(size = 1/4),
axis.line.y = element_blank(),
axis.ticks.y = element_blank())
bayesplot::mcmc_areas(post[, 1:4],
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "median"
)
m5.4 <- brm(Marriage.s ~ 1 + MedianAgeMarriage.s,
data = d,
prior = c(set_prior("normal(0,10)", class = "Intercept"),
set_prior("normal(0,1)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
summary(m5.3, prob = 0.89)
fitd54 <-
fitted(b5.4) %>%
as_tibble() %>%
bind_cols(d %>% select(MedianAgeMarriage.s))
fitd54 <-
fitted(m5.4) %>%
as_tibble() %>%
bind_cols(d %>% select(MedianAgeMarriage.s))
df54 <-
d %>%
select(MedianAgeMarriage.s, Marriage.s) %>%
bind_cols(fitd54 %>%
select(Estimate))
ggplot(data = df54,
aes(x = MedianAgeMarriage.s, y = Marriage.s)) +
theme_bw() +
geom_point(data = d,
aes(),#x = MedianAgeMarriage.s, y = Marriage.s),
size = 2, shape = 1, color = "firebrick4") +
geom_segment(aes(xend = MedianAgeMarriage.s, yend = Estimate),
size = 1/4) +
geom_line(aes(),#MedianAgeMarriage.s, y = Estimate),
color = "firebrick4") +
coord_cartesian(ylim = range(d$Marriage.s)) +
theme(panel.grid = element_blank())
fitd54 <-
fitted(m5.4) %>%
as_tibble() %>%
bind_cols(d %>% select(MedianAgeMarriage.s))
df54 <-
d %>%
select(MedianAgeMarriage.s, Marriage.s) %>%
bind_cols(fitd54 %>%
select(Estimate))
ggplot(data = df54,
aes(x = MedianAgeMarriage.s, y = Marriage.s)) +
theme_bw() +
geom_point(data = d,
aes(),#x = MedianAgeMarriage.s, y = Marriage.s),
size = 2, shape = 1, color = "firebrick4") +
geom_segment(aes(xend = MedianAgeMarriage.s, yend = Estimate),
size = 1/4) +
geom_line(aes(y = Estimate),#MedianAgeMarriage.s, y = Estimate),
color = "firebrick4") +
coord_cartesian(ylim = range(d$Marriage.s)) +
theme(panel.grid = element_blank())
residuals(m5.4) %>% as_tibble()
df54 <-
residuals(m5.4) %>%
as_tibble() %>%
select(Estimate) %>%
bind_cols(d %>% select(Divorce))
ggplot(data = df54,
aes(x = Estimate, y = Divorce)) +
theme_bw() +
stat_smooth(method = "lm", color = "firebrick4", fill = "firebrick4",
alpha = 1/5, size = 1/2) +
geom_vline(xintercept = 0, linetype = 2, color = "grey50") +
geom_point(size = 2, color = "firebrick4", alpha = 2/3) +
coord_cartesian(ylim = c(6, 14.1)) +
annotate("text", x = -.14, y = 14.1, label = "younger     older") +
labs(x = "Age of marriage residuals") +
theme(panel.grid = element_blank())
m5.4 <- brm(Marriage.s ~ 1 + MedianAgeMarriage.s,
data = d,
prior = c(set_prior("normal(0,10)", class = "Intercept"),
set_prior("normal(0,1)", class = "b"),
set_prior("cauchy(0,1)", class = "sigma")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
summary(m5.4, prob = 0.89)
df54 <-
residuals(m5.4) %>%
as_tibble() %>%
select(Estimate) %>%
bind_cols(d %>% select(Divorce))
ggplot(data = df54,
aes(x = Estimate, y = Divorce)) +
theme_bw() +
stat_smooth(method = "lm", color = "firebrick4", fill = "firebrick4",
alpha = 1/5, size = 1/2) +
geom_vline(xintercept = 0, linetype = 2, color = "grey50") +
geom_point(size = 2, color = "firebrick4", alpha = 2/3) +
coord_cartesian(ylim = c(6, 14.1)) +
annotate("text", x = -.14, y = 14.1, label = "younger     older") +
labs(x = "Age of marriage residuals") +
theme(panel.grid = element_blank())
df54 <-
residuals(m5.4) %>%
as_tibble() %>%
select(Estimate) %>%
bind_cols(d %>% select(Divorce))
ggplot(data = df54,
aes(x = Estimate, y = Divorce)) +
theme_bw() +
stat_smooth(method = "lm", color = "firebrick4", fill = "firebrick4",
alpha = 1/5, size = 1/2) +
geom_vline(xintercept = 0, linetype = 2, color = "grey50") +
geom_point(size = 2, color = "firebrick4", alpha = 2/3) +
coord_cartesian(ylim = c(6, 14.1)) +
annotate("text", x = -.14, y = 14.1, label = "younger         older") +
labs(x = "Age of marriage residuals") +
theme(panel.grid = element_blank())
df54 <-
residuals(m5.4) %>%
as_tibble() %>%
select(Estimate) %>%
bind_cols(d %>% select(Divorce))
ggplot(data = df54,
aes(x = Estimate, y = Divorce)) +
theme_bw() +
stat_smooth(method = "lm", color = "firebrick4", fill = "firebrick4",
alpha = 1/5, size = 1/2) +
geom_vline(xintercept = 0, linetype = 2, color = "grey50") +
geom_point(size = 2, color = "firebrick4", alpha = 2/3) +
coord_cartesian(ylim = c(6, 14.1)) +
annotate("text", x = -.14, y = 14.1, label = "younger                older") +
labs(x = "Age of marriage residuals") +
theme(panel.grid = element_blank())
nd <-
tibble(Marriage.s = seq(from = -3, to = 3, length.out = 30),
MedianAgeMarriage.s = rep(mean(d$MedianAgeMarriage.s,
times = 30)))
pred53.a <- predict(m5.3, newdata = nd)
fitd53.a <- fitted(m5.3, newdata = nd)
pred53.a
head(pred53.a)
head(fitd53.a)
head(nd)
nd <-
tibble(Marriage.s = seq(from = -3, to = 3, length.out = 30),
MedianAgeMarriage.s = rep(mean(d$MedianAgeMarriage.s,
times = 30)))
pred53.a <- predict(m5.3, newdata = nd)
fitd53.a <- fitted(m5.3, newdata = nd)
# This isn't the most tidyverse-centric way of doing things, but it just seemed easier to rely on the bracket syntax for this one
tibble(Divorce = fitd53.a[, 1],
fll     = fitd53.a[, 3],
ful     = fitd53.a[, 4],
pll     = pred53.a[, 3],
pul     = pred53.a[, 4]) %>%
bind_cols(nd) %>%  # Note our use of the pipe, here. This allowed us to feed the tibble directly into ggplot2 without having to save it as an object.
ggplot(aes(x = Marriage.s, y = Divorce)) +
theme_bw() +
geom_ribbon(aes(ymin = pll, ymax = pul),
fill = "firebrick", alpha = 1/5) +
geom_ribbon(aes(ymin = fll, ymax = ful),
fill = "firebrick", alpha = 1/5) +
geom_line(color = "firebrick4") +
coord_cartesian(ylim = c(6, 14)) +
labs(subtitle = "Counterfactual plot for which\nMedianAgeMarriage.s = 0") +
theme(panel.grid = element_blank())
nd <-
tibble(Marriage.s = seq(from = -3, to = 3, length.out = 30),
MedianAgeMarriage.s = rep(mean(d$MedianAgeMarriage.s,
times = 30)))
pred53.a <- predict(m5.3, newdata = nd)
fitd53.a <- fitted(m5.3, newdata = nd)
# This isn't the most tidyverse-centric way of doing things, but it just seemed easier to rely on the bracket syntax for this one
tibble(Divorce = fitd53.a[, 1],
fll     = fitd53.a[, 3],
ful     = fitd53.a[, 4],
pll     = pred53.a[, 3],
pul     = pred53.a[, 4]) %>%
bind_cols(nd) %>%  # Note our use of the pipe, here. This allowed us to feed the tibble directly into ggplot2 without having to save it as an object.
ggplot(aes(x = Marriage.s, y = Divorce)) +
theme_bw() +
geom_ribbon(aes(ymin = pll, ymax = pul),
fill = "firebrick", alpha = 1/5) +
geom_ribbon(aes(ymin = fll, ymax = ful),
fill = "firebrick", alpha = 1/5) +
geom_line(color = "firebrick4") +
coord_cartesian(ylim = c(6, 14)) +
labs(subtitle = "Counterfactual plot for which MedianAgeMarriage.s = 0") +
theme(panel.grid = element_blank())
nd <-
tibble(MedianAgeMarriage.s = seq(from = -3, to = 3.5, length.out = 30),
Marriage.s = rep(mean(d$Marriage.s), times = 30))
pred53.b <- predict(m5.3, newdata = nd)
fitd53.b <- fitted(m5.3, newdata = nd)
tibble(Divorce = fitd53.b[, 1],
fll     = fitd53.b[, 3],
ful     = fitd53.b[, 4],
pll     = pred53.b[, 3],
pul     = pred53.b[, 4]) %>%
bind_cols(nd) %>%
ggplot(aes(x = MedianAgeMarriage.s, y = Divorce)) +
theme_bw() +
geom_ribbon(aes(ymin = pll, ymax = pul),
fill = "firebrick", alpha = 1/5) +
geom_ribbon(aes(ymin = fll, ymax = ful),
fill = "firebrick", alpha = 1/5) +
geom_line(color = "firebrick4") +
coord_cartesian(ylim = c(6, 14)) +
labs(subtitle = "Counterfactual plot for which Marriage.s = 0") +
theme(panel.grid = element_blank())
blogdown:::serve_site()
?predict.brmsfit
fitted(m5.3, probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(d %>% select(Divorce, Loc)) %>%
ggplot(aes(x = Divorce, y = Estimate)) +
theme_bw() +
geom_abline(linetype = 2, color = "grey50", size = .5) +
geom_point(size = 1.5, color = "firebrick4", alpha = 3/4) +
geom_linerange(aes(ymin = `5.5%ile`, ymax = `94.5%ile`),
size = 1/4, color = "firebrick4") +
geom_linerange(aes(ymin = Estimate - Est.Error, ymax = Estimate + Est.Error),
size = 1/2, color = "firebrick4") +
geom_text(data = . %>% filter(Loc %in% c("ID", "UT")),
aes(label = Loc),
hjust = 0, nudge_x = - 0.65) +
labs(x = "Observed divorce", y = "Predicted divorce") +
theme(panel.grid = element_blank())
fitted(m5.3, probs = c(0.055, 0.945)) %>%
as_tibble()
10.4 - (2*0.274)
10.4 + (2*0.274)
?fitted.brmsfit
# The thin lines are the 95% intervals and the thicker lines are +/- the posterior SD, both of which are returned with fitted()
fitted(m5.3, probs = c(0.055, 0.945)) %>%
as_tibble() %>%
bind_cols(d %>% select(Divorce, Loc)) %>%
ggplot(aes(x = Divorce, y = Estimate)) +
theme_bw() +
geom_abline(linetype = 2, color = "grey50", size = .5) +
geom_point(size = 1.5, color = "firebrick4", alpha = 3/4) +
geom_linerange(aes(ymin = `5.5%ile`, ymax = `94.5%ile`),
size = 1/4, color = "firebrick4") +
geom_linerange(aes(ymin = Estimate - Est.Error, ymax = Estimate + Est.Error),
size = 1/2, color = "firebrick4") +
geom_text(data = . %>% filter(Loc %in% c("ID", "UT")),
aes(label = Loc),
hjust = 0, nudge_x = - 0.65) +
labs(x = "Observed divorce", y = "Predicted divorce") +
coord_fixed() +
theme(panel.grid = element_blank())
