d %>%
glimpse()
d <-
d %>%
mutate(tank = 1:nrow(d))
# unpooled model
m12.1 <-
brm(data = d, family = binomial,
surv | trials(density) ~ 0 + factor(tank),
prior = c(set_prior("normal(0, 5)", class = "b")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
# pooled model
m12.2 <-
brm(data = d, family = binomial,
surv | trials(density) ~ 1 + (1 | tank),
prior = c(set_prior("normal(0, 1)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "sd")),
chains = 4, iter = 4000, warmup = 1000, cores = 4)
print(m12.2)
kf <- kfold(b12.1, b12.2,
K = 10, cores = 4)
kf <- kfold(m12.1, m12.2,
K = 10, cores = 4)
kf <- kfold(m12.1, m12.2,
K = 10, cores = 4)
post <- posterior_samples(m12.2)
invlogit <- function(x){1/(1+exp(-x))}
postMdn <-
coef(m12.2, robust = T) %>% data.frame() %>%
add_column(tank = d$tank,
density = d$density,
propsurv = d$propsurv) %>%
mutate(postMdn = invlogit(tank.Estimate.Intercept))
library(ggthemes)
postMdn %>%
ggplot(aes(x = tank, y = postMdn)) +
theme_fivethirtyeight() +
geom_hline(yintercept = invlogit(median(post$b_Intercept)), linetype = 2, size = 1/4) +
geom_vline(xintercept = c(16.5, 32.5), size = 1/4) +
geom_point(shape = 1) +
geom_point(aes(y = propsurv), color = "orange2") +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(1, 16, 32, 48)) +
labs(title = "Proportion of survivors in each tank",
subtitle = "The empirical proportions are in orange while the\nmodel-implied proportions are the black circles.\nThe dashed line is the model-implied average survival proportion.") +
annotate("text", x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
theme(panel.grid = element_blank())
library(rethinking)
install.packages("rethinking")
install.packages("rethinking")
install.packages("rethinking")
library(devtools)
devtools::install_github("rmcelreath/rethinking")
library(updateR)
install.packages("rmarkdown")
library(rethinking)
library(tidyverse)
install.packages("devtools")
install.packages("caret")
install.packages("combinat")
install.packages("corrplot")
install.packages("DAAG")
install.packages("energy")
install.packages("forecast")
install.packages("gridExtra")
install.packages("infotheo")
install.packages("ltm")
install.packages("matrixStats")
install.packages("minerva")
install.packages("plyr")
install.packages("pROC")
install.packages("ggrepel")
install.packages("dygraphs")
install.packages("ggplot2")
install.packages("xts")
install.packages("rebus")
install.packages("tidyverse")
install.packages(c("coda","mvtnorm","devtools","loo"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages("ggthemes")
install.packages("forecast")
install.packages("RcppArmadillo")
install.packages("forecast")
library(rethinking)
set.seed(1)
N_children <- 51
s <- rbinom( N_children , size=1 , prob=0.75 )
s_obs <- s
s_obs[ sample( 1:N_children , size=21 ) ] <- -1
tea <- rbinom( N_children , size=1 , prob=s*1 + (1-s)*0.5 )
data_list <- list(
N_children = N_children,
tea = tea,
s = s_obs )
# recode -1 to NA
data_list2 <- list(
tea = tea,
s = ifelse( s_obs==-1 , NA , s_obs ) )
m2 <- map2stan(
alist(
tea ~ bernoulli(p),
p <- s*p_drink + (1-s)*p_cheat,
s ~ bernoulli(sigma),
p_drink ~ beta(2,2),
p_cheat ~ beta(2,2),
sigma ~ beta(2,2)
),
data=data_list2 ,
constraints=list(
p_drink="lower=0,upper=1",
p_cheat="lower=0,upper=1",
sigma="lower=0,upper=1") ,
do_discrete_imputation=TRUE , chains=4 )
data{
int N_children;      // number of children
int tea[N_children]; // [0,1] observed drinking tea
int s[N_children];   // [0,1,-1] stabled ox
}
library(rethinking)
data(reedfrogs)
d <- reedfrogs
rm(reedfrogs)
detach(package:rethinking, unload = T)
library(brms)
post <- posterior_samples(m12.2)
devtools::install_github("paul-buerkner/brms", dependencies = TRUE)
devtools::install_github("stan-dev/loo")
library(rethinking)
data(reedfrogs)
d <- reedfrogs
rm(reedfrogs)
detach(package:rethinking, unload = T)
library(brms)
library(tidyverse)
d %>%
glimpse()
d <-
d %>%
mutate(tank = 1:nrow(d))
# unpooled model
m12.1 <-
brm(data = d, family = binomial,
surv | trials(density) ~ 0 + factor(tank),
prior = c(set_prior("normal(0, 5)", class = "b")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
# pooled model
m12.2 <-
brm(data = d, family = binomial,
surv | trials(density) ~ 1 + (1 | tank),
prior = c(set_prior("normal(0, 1)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "sd")),
chains = 4, iter = 4000, warmup = 1000, cores = 4)
print(m12.2)
kf <- kfold(m12.1, m12.2,
K = 10, cores = 2)
kf
post <- posterior_samples(m12.2)
invlogit <- function(x){1/(1+exp(-x))}
postMdn <-
coef(m12.2, robust = T) %>% data.frame() %>%
add_column(tank = d$tank,
density = d$density,
propsurv = d$propsurv) %>%
mutate(postMdn = invlogit(tank.Estimate.Intercept))
library(ggthemes)
postMdn %>%
ggplot(aes(x = tank, y = postMdn)) +
theme_fivethirtyeight() +
geom_hline(yintercept = invlogit(median(post$b_Intercept)), linetype = 2, size = 1/4) +
geom_vline(xintercept = c(16.5, 32.5), size = 1/4) +
geom_point(shape = 1) +
geom_point(aes(y = propsurv), color = "orange2") +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(1, 16, 32, 48)) +
labs(title = "Proportion of survivors in each tank",
subtitle = "The empirical proportions are in orange while the\nmodel-implied proportions are the black circles.\nThe dashed line is the model-implied average survival proportion.") +
annotate("text", x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
theme(panel.grid = element_blank())
?add_column
postMdn
head(psot)
head(post)
mean(post$b_Intercept)
coef(m12.2, robust = T)
post <- posterior_samples(m12.2)
invlogit <- function(x){1/(1+exp(-x))}
postMdn <-
coef(m12.2, robust = T) %>% data.frame() %>%
add_column(tank = d$tank,
density = d$density,
propsurv = d$propsurv) %>%
mutate(postMdn = invlogit(tank.Estimate.Intercept))
library(ggthemes)
postMdn %>%
ggplot(aes(x = tank, y = postMdn)) +
theme_fivethirtyeight() +
geom_hline(yintercept = invlogit(median(post$b_Intercept)), linetype = 2, size = 1/4) +
geom_vline(xintercept = c(16.5, 32.5), size = 1/4) +
geom_point(shape = 1) +
geom_point(aes(y = propsurv), color = "orange2") +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(1, 16, 32, 48)) +
labs(title = "Proportion of survivors in each tank",
subtitle = "The empirical proportions are in orange while the\nmodel-implied proportions are the black circles.\nThe dashed line is the model-implied average survival proportion.") +
annotate("text", x = c(8, 16 + 8, 32 + 8), y = 0,
label = c("small tanks", "medium tanks", "large tanks")) +
theme(panel.grid = element_blank())
tibble(x = c(-3, 4)) %>%
ggplot(aes(x = x)) +
theme_fivethirtyeight() +
mapply(function(mean, sd) {
stat_function(fun = dnorm,
args = list(mean = mean, sd = sd),
alpha = .2,
color = "orange2")
},
# Enter means and standard deviations here
mean = post[1:100, 1],
sd = post[1:100, 2]
) +
labs(title = "Survival in log-odds") +
scale_y_continuous(NULL, breaks = NULL)
ggplot(data = post,
aes(x = invlogit(rnorm(nrow(post), mean = post[, 1], sd = post[, 2])))) +
theme_fivethirtyeight() +
geom_density(size = 0, fill = "orange2") +
labs(title = "Probability of survival") +
scale_y_continuous(NULL, breaks = NULL)
nrow(post)
m12.2.e <-
brm(data = d, family = binomial,
surv | trials(density) ~ 1 + (1 | tank),
prior = c(set_prior("normal(0, 1)", class = "Intercept"),
set_prior("exponential(1)", class = "sd")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
ggplot(data = tibble(x = seq(from = 0, to = 4, by = .01)),
aes(x = x)) +
theme_fivethirtyeight()+
geom_ribbon(aes(ymin = 0, ymax = dexp(x, rate = 1)),  # the prior
fill = "orange2", alpha = 1/3) +
geom_density(data = posterior_samples(m12.2.e),       # the posterior
aes(x = sd_tank__Intercept),
size = 0, fill = "orange2") +
geom_vline(xintercept = posterior_samples(m12.2.e)[, 2] %>% median(),
color = "blue", linetype = 2) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = c(0, 3.5)) +
labs(title = "Bonus prior/posterior plot\n for `sd_tank__Intercept`",
subtitle = "The prior is the semitransparent ramp in the\nbackground. The posterior is the solid orange\nmound. The dashed line is the posterior median.")
m12.2.e <-
brm(data = d, family = binomial,
surv | trials(density) ~ 1 + (1 | tank),
prior = c(set_prior("normal(0, 1)", class = "Intercept"),
set_prior("exponential(1)", class = "sd")),
chains = 4, iter = 2000, warmup = 500, cores = 4)
coef(m12.2)
ggplot(data = tibble(x = seq(from = 0, to = 4, by = .01)),
aes(x = x)) +
theme_fivethirtyeight()+
geom_ribbon(aes(ymin = 0, ymax = dexp(x, rate = 1)),  # the prior
fill = "orange2", alpha = 1/3) +
geom_density(data = posterior_samples(m12.2.e),       # the posterior
aes(x = sd_tank__Intercept),
size = 0, fill = "orange2") +
geom_vline(xintercept = posterior_samples(m12.2.e)[, 2] %>% median(),
color = "blue", linetype = 2) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = c(0, 3.5)) +
labs(title = "Bonus prior/posterior plot\n for `sd_tank__Intercept`",
subtitle = "The prior is the semitransparent ramp in the\nbackground. The posterior is the solid orange\nmound. The dashed line is the posterior median.")
coef(m12.2)
coef(m12.2, robust = T)
postMdn
coef(m12.2, robust = T) %>% data.frame()
head(posterior_samples(m12.2))
head(coef(m12.2, robust = T) %>% data.frame())
mean(post$`r_tank[1,Intercept]`)
set.seed(10579595) # To make results reproducible
dsim <-
dsim %>%
mutate(si = rbinom(nponds, prob = invlogit(true_a), size = ni)) %>%
mutate(p_nopool = si/ni)
a      <- 1.4
sigma  <- 1.5
nponds <- 60
ni     <- rep(c(5, 10, 25, 35), each = 15) %>% as.integer()
set.seed(10579595) # To make results reproducible
dsim <-
tibble(pond = 1:nponds,
ni = ni,
true_a = rnorm(nponds, mean = a, sd = sigma))
set.seed(10579595) # To make results reproducible
dsim <-
dsim %>%
mutate(si = rbinom(nponds, prob = invlogit(true_a), size = ni)) %>%
mutate(p_nopool = si/ni)
dsim %>%
glimpse()
head(dsim)
b12.3 <-
brm(data = dsim, family = binomial,
si | trials(ni) ~ 0 + pond,
chains = 1, iter = 10000, warmup = 1000, cores = 1)
b12.3
dsim2 <- dsim %>% mutate(pondN = str_c("pond", pond))
dsim2
b12.3 <-
brm(data = dsim2, family = binomial,
si | trials(ni) ~ 0 + pondN,
chains = 1, iter = 10000, warmup = 1000, cores = 1)
b12.3
dsim
?brm
b12.3 <-
brm(data = dsim2, family = binomial,
si | trials(ni) ~ 0 + pondN,
chains = 1, iter = 10000, warmup = 1000, cores = 1,
control = list(adapt_delta = 0.8))
b12.3 <-
brm(data = dsim, family = binomial,
si | trials(ni) ~ 0 + factor(pond),
prior = c(set_prior("normal(0, 10)", class = "b")),
chains = 1, iter = 10000, warmup = 1000, cores = 1,
control = list(adapt_delta = 0.9))
b12.3
m12.3 <-
brm(data = dsim, family = binomial,
si | trials(ni) ~ 1 + (1 | pond),
prior = c(set_prior("normal(0, 1)", class = "Intercept"),
set_prior("cauchy(0, 1)", class = "sd")),
chains = 1, iter = 10000, warmup = 1000, cores = 1)
print(m12.3)
coef(b12.3)$pond %>%
round(digits = 2)
coef(m12.3)$pond %>%
round(digits = 2)
coef(b12.3)
fixef(b12.3)
coef(m12.3)
fixef(m12.3)
p_partpool <-
coef(b12.3) %>%
data.frame() %>%  # as_tibble() didn't work well, for this.
select(pond.Estimate.Intercept) %>%
mutate(pond.Estimate.Intercept = invlogit(pond.Estimate.Intercept)) %>%
pull()
p_partpool <-
coef(m12.3) %>%
data.frame() %>%  # as_tibble() didn't work well, for this.
select(pond.Estimate.Intercept) %>%
mutate(pond.Estimate.Intercept = invlogit(pond.Estimate.Intercept)) %>%
pull()
dsim <-
dsim %>%
mutate(p_true = invlogit(true_a)) %>%
mutate(nopool_error = abs(p_nopool - p_true)) %>%
mutate(partpool_error = abs(p_partpool - p_true))
dsim %>%
glimpse()
dfline <-
dsim %>%
select(ni, nopool_error:partpool_error) %>%
gather(key, value, -ni) %>%
group_by(key, ni) %>%
summarise(mean_error = mean(value)) %>%
mutate(x = c(1, 16, 31, 46),
xend = c(15, 30, 45, 60))
ggplot(data = dsim, aes(x = pond)) +
theme_fivethirtyeight() +
geom_vline(xintercept = c(15.5, 30.5, 45.4),
color = "white", size = 2/3) +
geom_point(aes(y = nopool_error), color = "orange2") +
geom_point(aes(y = partpool_error), shape = 1) +
geom_segment(data = dfline,
aes(x = x, xend = xend,
y = mean_error, yend = mean_error),
color = rep(c("orange2", "black"), each = 4),
linetype = rep(1:2, each = 4)) +
labs(y = "absolute error",
title = "Estimate error by model type",
subtitle = "The horizontal axis displays pond number. The vertical\naxis measures the absolute error in the predicted proportion\nof survivors, compared to the true value used in the simulation.\nThe higher the point, the worse the estimate. No-pooling shown\nin orange. Partial pooling shown in black. The orange and\ndashed black lines show the average error for each kind of\nestimate, across each initial density of tadpoles (pond size).\nSmaller ponds produce more error, but the partial pooling\nestimates are better on average, especially in smaller ponds.") +
scale_x_continuous(breaks = c(1, 10, 20, 30, 40, 50, 60)) +
annotate("text", x = c(15 - 7.5, 30 - 7.5, 45 - 7.5, 60 - 7.5), y = .45,
label = c("tiny (5)", "small (10)", "medium (25)", "large (35)")) +
theme(panel.grid = element_blank())
dsim %>%
select(ni, nopool_error:partpool_error) %>%
gather(key, value, -ni) %>%
group_by(key) %>%
summarise(mean_error   = mean(value) %>% round(digits = 3),
median_error = median(value) %>% round(digits = 3))
b12.3
b12.3 <-
brm(data = dsim, family = binomial,
si | trials(ni) ~ 0 + factor(pond),
prior = c(set_prior("normal(0, 5)", class = "b")),
chains = 1, iter = 10000, warmup = 1000, cores = 1,
control = list(adapt_delta = 0.9))
b12.3
fixef(b12.3)
fixef(b12.3)$Estimate
fixef(b12.3)`,1`
fixef(b12.3)[,1]
dsim2 <-
dsim %>%
mutate(p_true = invlogit(true_a)) %>%
mutate(nopool_error = abs(invlogit(fixef(b12.3)[,1]) - p_true)) %>%
mutate(partpool_error = abs(p_partpool - p_true))
dsim2
dsim <-
dsim %>%
mutate(p_true = invlogit(true_a)) %>% mutate(p_nopool = invlogit(fixef(b12.3)[,1]) )
mutate(nopool_error = abs(invlogit(fixef(b12.3)[,1]) - p_true)) %>%
mutate(partpool_error = abs(p_partpool - p_true))
set.seed(10579595) # To make results reproducible
dsim <-
dsim %>%
mutate(si = rbinom(nponds, prob = invlogit(true_a), size = ni)) %>%
mutate(p_nopool = si/ni)
dsim %>%
glimpse()
a      <- 1.4
sigma  <- 1.5
nponds <- 60
ni     <- rep(c(5, 10, 25, 35), each = 15) %>% as.integer()
set.seed(10579595) # To make results reproducible
dsim <-
tibble(pond = 1:nponds,
ni = ni,
true_a = rnorm(nponds, mean = a, sd = sigma))
set.seed(10579595) # To make results reproducible
dsim <-
dsim %>%
mutate(si = rbinom(nponds, prob = invlogit(true_a), size = ni)) %>%
mutate(p_nopool = si/ni)
dsim %>%
glimpse()
p_partpool <-
coef(m12.3) %>%
data.frame() %>%  # as_tibble() didn't work well, for this.
select(pond.Estimate.Intercept) %>%
mutate(pond.Estimate.Intercept = invlogit(pond.Estimate.Intercept)) %>%
pull()
dsim <-
dsim %>%
mutate(p_true = invlogit(true_a)) %>%
mutate(nopool_error = abs(p_nopool - p_true)) %>%
mutate(partpool_error = abs(p_partpool - p_true))
dsim %>%
glimpse()
dsim2 <-
dsim %>%
mutate(p_true = invlogit(true_a)) %>% mutate(p_nopool = invlogit(fixef(b12.3)[,1]) ) %>%
mutate(nopool_error = abs(invlogit(fixef(b12.3)[,1]) - p_true)) %>%
mutate(partpool_error = abs(p_partpool - p_true))
dsim2
dfline <-
dsim2 %>%
select(ni, nopool_error:partpool_error) %>%
gather(key, value, -ni) %>%
group_by(key, ni) %>%
summarise(mean_error = mean(value)) %>%
mutate(x = c(1, 16, 31, 46),
xend = c(15, 30, 45, 60))
ggplot(data = dsim2, aes(x = pond)) +
theme_fivethirtyeight() +
geom_vline(xintercept = c(15.5, 30.5, 45.4),
color = "white", size = 2/3) +
geom_point(aes(y = nopool_error), color = "orange2") +
geom_point(aes(y = partpool_error), shape = 1) +
geom_segment(data = dfline,
aes(x = x, xend = xend,
y = mean_error, yend = mean_error),
color = rep(c("orange2", "black"), each = 4),
linetype = rep(1:2, each = 4)) +
labs(y = "absolute error",
title = "Estimate error by model type",
subtitle = "The horizontal axis displays pond number. The vertical\naxis measures the absolute error in the predicted proportion\nof survivors, compared to the true value used in the simulation.\nThe higher the point, the worse the estimate. No-pooling shown\nin orange. Partial pooling shown in black. The orange and\ndashed black lines show the average error for each kind of\nestimate, across each initial density of tadpoles (pond size).\nSmaller ponds produce more error, but the partial pooling\nestimates are better on average, especially in smaller ponds.") +
scale_x_continuous(breaks = c(1, 10, 20, 30, 40, 50, 60)) +
annotate("text", x = c(15 - 7.5, 30 - 7.5, 45 - 7.5, 60 - 7.5), y = .45,
label = c("tiny (5)", "small (10)", "medium (25)", "large (35)")) +
theme(panel.grid = element_blank())
dfline <-
dsim %>%
select(ni, nopool_error:partpool_error) %>%
gather(key, value, -ni) %>%
group_by(key, ni) %>%
summarise(mean_error = mean(value)) %>%
mutate(x = c(1, 16, 31, 46),
xend = c(15, 30, 45, 60))
ggplot(data = dsim, aes(x = pond)) +
theme_fivethirtyeight() +
geom_vline(xintercept = c(15.5, 30.5, 45.4),
color = "white", size = 2/3) +
geom_point(aes(y = nopool_error), color = "orange2") +
geom_point(aes(y = partpool_error), shape = 1) +
geom_segment(data = dfline,
aes(x = x, xend = xend,
y = mean_error, yend = mean_error),
color = rep(c("orange2", "black"), each = 4),
linetype = rep(1:2, each = 4)) +
labs(y = "absolute error",
title = "Estimate error by model type",
subtitle = "The horizontal axis displays pond number. The vertical\naxis measures the absolute error in the predicted proportion\nof survivors, compared to the true value used in the simulation.\nThe higher the point, the worse the estimate. No-pooling shown\nin orange. Partial pooling shown in black. The orange and\ndashed black lines show the average error for each kind of\nestimate, across each initial density of tadpoles (pond size).\nSmaller ponds produce more error, but the partial pooling\nestimates are better on average, especially in smaller ponds.") +
scale_x_continuous(breaks = c(1, 10, 20, 30, 40, 50, 60)) +
annotate("text", x = c(15 - 7.5, 30 - 7.5, 45 - 7.5, 60 - 7.5), y = .45,
label = c("tiny (5)", "small (10)", "medium (25)", "large (35)")) +
theme(panel.grid = element_blank())
install.packages("blogdown")
