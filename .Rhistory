tibble(neocortex = seq(from = .5, to = .8, length.out = 30),
mass = rep(4.5, times = 30))
ftd <-
fitted(m6.14, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
pp_average(m6.11, m6.12, m6.13, m6.14,
weights = "waic",
method = "fitted",  # for new data predictions, use method = "predict"
newdata = nd) %>%
as_tibble() %>%
bind_cols(nd) %>%
ggplot(aes(x = neocortex, y = Estimate)) +
theme_classic() +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "plum", alpha = 1/3) +
geom_line(color = "plum2") +
geom_ribbon(data = ftd, aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "transparent", color = "plum3", linetype = 2) +
geom_line(data = ftd,
color = "plum3", linetype = 2) +
geom_point(data = d, aes(x = neocortex, y = kcal.per.g),
size = 2, color = "plum4") +
labs(y = "kcal.per.g") +
coord_cartesian(xlim = range(d$neocortex),
ylim = range(d$kcal.per.g))
pp_average(m6.11, m6.12, m6.13, m6.14,
weights = "waic",
method = "fitted",  # for new data predictions, use method = "predict"
newdata = nd) %>%
as_tibble()
?pp_average
nd <-
tibble(neocortex = seq(from = .5, to = .8, length.out = 30),
mass = rep(4.5, times = 30))
ftd <-
fitted(m6.14, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
pp_average(m6.11, m6.12, m6.13, m6.14,
weights = "waic",
#method = "fitted",  # for new data predictions, use method = "predict"
newdata = nd) %>%
as_tibble() %>%
bind_cols(nd) %>%
ggplot(aes(x = neocortex, y = Estimate)) +
theme_classic() +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "plum", alpha = 1/3) +
geom_line(color = "plum2") +
geom_ribbon(data = ftd, aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "transparent", color = "plum3", linetype = 2) +
geom_line(data = ftd,
color = "plum3", linetype = 2) +
geom_point(data = d, aes(x = neocortex, y = kcal.per.g),
size = 2, color = "plum4") +
labs(y = "kcal.per.g") +
coord_cartesian(xlim = range(d$neocortex),
ylim = range(d$kcal.per.g))
nd <-
tibble(neocortex = seq(from = .5, to = .8, length.out = 30),
mass = rep(4.5, times = 30))
ftd <-
fitted(m6.14, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
pp_average(m6.11, m6.12, m6.13, m6.14,
weights = "waic",
method = "fitted",  # for new data predictions, use method = "predict"
newdata = nd) %>%
as_tibble() %>%
bind_cols(nd) %>%
ggplot(aes(x = neocortex, y = Estimate)) +
theme_classic() +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "plum", alpha = 1/3) +
geom_line(color = "plum2") +
geom_ribbon(data = ftd, aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "transparent", color = "plum3", linetype = 2) +
geom_line(data = ftd,
color = "plum3", linetype = 2) +
geom_point(data = d, aes(x = neocortex, y = kcal.per.g),
size = 2, color = "plum4") +
labs(y = "kcal.per.g") +
coord_cartesian(xlim = range(d$neocortex),
ylim = range(d$kcal.per.g))
bayes_R2(m6.14) %>% round(digits = 3)
# model b6.13
m6.13.R2 <-
bayes_R2(m6.13, summary = F) %>%
as_tibble() %>%
rename(R2.13 = R2)
# model b6.14
m6.14.R2 <-
bayes_R2(m6.14, summary = F) %>%
as_tibble() %>%
rename(R2.14 = R2)
# Let's put them in the same data object
combined_R2s <-
bind_cols(m6.13.R2, m6.14.R2) %>%
mutate(dif = R2.14 - R2.13)
# A simple density plot
combined_R2s %>%
ggplot(aes(x = R2.13)) +
theme_classic() +
geom_density(size = 0, fill = "plum1", alpha = 2/3) +
geom_density(aes(x = R2.14),
size = 0, fill = "plum2", alpha = 2/3) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = 0:1) +
labs(x = NULL,
title = expression(paste(italic("R")^{2}, " distributions")),
subtitle = "Going from left to right, these are for\nmodels b6.13 and b6.14.")
rbind(bayes_R2(m6.11),
bayes_R2(m6.12),
bayes_R2(m6.13),
bayes_R2(m6.14)) %>%
as_tibble() %>%
mutate(model = c("m6.11", "m6.12", "m6.13", "m6.14"),
r_square_posterior_mean = round(Estimate, digits = 2)) %>%
select(model, r_square_posterior_mean)
# model b6.13
m6.13.R2 <-
bayes_R2(m6.13, summary = F) %>%
as_tibble() %>%
rename(R2.13 = R2)
# model b6.14
m6.14.R2 <-
bayes_R2(m6.14, summary = F) %>%
as_tibble() %>%
rename(R2.14 = R2)
# Let's put them in the same data object
combined_R2s <-
bind_cols(m6.13.R2, m6.14.R2) %>%
mutate(dif = R2.14 - R2.13)
# A simple density plot
combined_R2s %>%
ggplot(aes(x = R2.13)) +
theme_classic() +
geom_density(size = 0, fill = "springgreen4", alpha = 2/3) +
geom_density(aes(x = R2.14),
size = 0, fill = "springgreen3", alpha = 2/3) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = 0:1) +
labs(x = NULL,
title = expression(paste(italic("R")^{2}, " distributions")),
subtitle = "Going from left to right, these are for\nmodels m6.13 and m6.14.")
m6.12.R2
m6.13.R2
m6.14.R2
# model b6.13
m6.13.R2 <-
bayes_R2(m6.13, summary = F) %>%
as_tibble() %>%
rename(R2.13 = R2)
# model b6.14
m6.14.R2 <-
bayes_R2(m6.14, summary = F) %>%
as_tibble() %>%
rename(R2.14 = R2)
# Let's put them in the same data object
combined_R2s <-
bind_cols(m6.13.R2, m6.14.R2) %>%
mutate(dif = R2.14 - R2.13)
# A simple density plot
combined_R2s %>%
ggplot(aes(x = R2.13)) +
theme_classic() +
geom_density(size = 0, fill = "springgreen4", alpha = 2/3) +
geom_density(aes(x = R2.14),
size = 0, fill = "springgreen3", alpha = 2/3) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = 0:1) +
labs(x = NULL,
title = expression(paste(italic("R")^{2}, " distributions")),
subtitle = "Going from left to right, these are for\nmodels m6.13 and m6.14.")
combined_R2s
combined_R2s %>%
ggplot(aes(x = dif)) +
theme_classic() +
geom_density(size = 0, fill = "springgreen") +
geom_vline(xintercept = quantile(combined_R2s$dif,
probs = c(.025, .5, .975)),
color = "white", size = c(1/2, 1, 1/2)) +
scale_y_continuous(NULL, breaks = NULL) +
labs(x = expression(paste(Delta, italic("R")^{2})),
subtitle = "This is how much more variance, in terms\nof %, model b6.14 explained compared to\nmodel b6.13. The white lines are the\nposterior median and 95% percentiles.")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
shinyjs:::colourPickerAddin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(tidyverse)
d <-
tibble(species = c("afarensis", "africanus", "habilis", "boisei",
"rudolfensis", "ergaster", "sapiens"),
brain = c(438, 452, 612, 521, 752, 871, 1350),
mass = c(37.0, 35.5, 34.5, 41.5, 55.5, 61.0, 53.5))
d <-
d %>%
mutate(mass.s = (mass - mean(mass))/sd(mass))
library(brms)
# Here we specify our starting values
Inits <- list(Intercept = mean(d$brain),
mass.s = 0,
sigma = sd(d$brain))
# List of lists depending on the number of chains
InitsList <-list(Inits, Inits, Inits, Inits)
# The model
m6.8 <-
brm(data = d, family = gaussian,
brain ~ 1 + mass.s,
prior = c(set_prior("normal(0, 1000)", class = "Intercept"),
set_prior("normal(0, 1000)", class = "b"),
set_prior("cauchy(0, 10)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)  # Here we put our start values in the brm() function
dfLL <-
m6.8 %>%
#log_lik() returns a matrix. Each observation gets a column and each HMC chain iteration gets a row
log_lik() %>%
as_tibble()
dfLL %>%
glimpse()
dfLL <-
dfLL %>%
mutate(sums     = rowSums(.),
deviance = -2*sums)
quantile(dfLL$deviance, c(.025, .5, .975))
ggplot(data = dfLL, aes(x = deviance)) +
theme_classic() +
geom_density(fill = "plum", size = 0) +
geom_vline(xintercept = quantile(dfLL$deviance, c(.025, .5, .975)),
color = "plum4", linetype = c(2, 1, 2)) +
scale_x_continuous(breaks = quantile(dfLL$deviance, c(.025, .5, .975)),
labels = c(95, 98, 105)) +
scale_y_continuous(NULL, breaks = NULL) +
labs(title = "The deviance distribution",
subtitle = "The dotted lines are the 95% intervals and\nthe solid line is the median.") +
theme(text = element_text(family = "Courier"))
ggplot(data = dfLL, aes(x = deviance)) +
theme_classic() +
geom_density(fill = "plum", size = 0) +
geom_vline(xintercept = quantile(dfLL$deviance, c(.025, .5, .975)),
color = "plum4", linetype = c(2, 1, 2)) +
scale_x_continuous(breaks = quantile(dfLL$deviance, c(.025, .5, .975)),
labels = c(95, 98, 105)) +
scale_y_continuous(NULL, breaks = NULL) +
labs(title = "The deviance distribution",
subtitle = "The dotted lines are the 95% intervals and\nthe solid line is the median.") +
theme(text = element_text(family = "Courier"))
blogdown:::serve_site()
blogdown:::serve_site()
waic(m6.8)
waic(m6.8)
library(tidyverse)
d <-
tibble(species = c("afarensis", "africanus", "habilis", "boisei",
"rudolfensis", "ergaster", "sapiens"),
brain = c(438, 452, 612, 521, 752, 871, 1350),
mass = c(37.0, 35.5, 34.5, 41.5, 55.5, 61.0, 53.5))
d <-
d %>%
mutate(mass.s = (mass - mean(mass))/sd(mass))
library(brms)
# Here we specify our starting values
Inits <- list(Intercept = mean(d$brain),
mass.s = 0,
sigma = sd(d$brain))
# List of lists depending on the number of chains
InitsList <-list(Inits, Inits, Inits, Inits)
# The model
m6.8 <-
brm(data = d, family = gaussian,
brain ~ 1 + mass.s,
prior = c(set_prior("normal(0, 1000)", class = "Intercept"),
set_prior("normal(0, 1000)", class = "b"),
set_prior("cauchy(0, 10)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)  # Here we put our start values in the brm() function
dfLL <-
m6.8 %>%
#log_lik() returns a matrix. Each observation gets a column and each HMC chain iteration gets a row
log_lik() %>%
as_tibble()
dfLL %>%
glimpse()
dfLL <-
dfLL %>%
mutate(sums     = rowSums(.),
deviance = -2*sums)
quantile(dfLL$deviance, c(.025, .5, .975))
ggplot(data = dfLL, aes(x = deviance)) +
theme_classic() +
geom_density(fill = "plum", size = 0) +
geom_vline(xintercept = quantile(dfLL$deviance, c(.025, .5, .975)),
color = "plum4", linetype = c(2, 1, 2)) +
scale_x_continuous(breaks = quantile(dfLL$deviance, c(.025, .5, .975)),
labels = c(95, 98, 105)) +
scale_y_continuous(NULL, breaks = NULL) +
labs(title = "The deviance distribution",
subtitle = "The dotted lines are the 95% intervals and\nthe solid line is the median.") +
theme(text = element_text(family = "Courier"))
waic(m6.8)
library(rethinking)
data(milk)
d <-
milk %>%
filter(complete.cases(.))
rm(milk)
d <-
d %>%
mutate(neocortex = neocortex.perc/100)
detach(package:rethinking, unload = T)
# Model with no predictors (just the intercept)
Inits <- list(Intercept = mean(d$kcal.per.g),
sigma = sd(d$kcal.per.g))
InitsList <-list(Inits, Inits, Inits, Inits)
m6.11 <-
brm(data = d, family = gaussian,
kcal.per.g ~ 1,
prior = c(set_prior("uniform(-1000, 1000)", class = "Intercept"),
set_prior("uniform(0, 100)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)
# Model with only neocortex
Inits <- list(Intercept = mean(d$kcal.per.g),
neocortex = 0,
sigma = sd(d$kcal.per.g))
InitsList <-list(Inits, Inits, Inits, Inits)
m6.12 <-
brm(data = d, family = gaussian,
kcal.per.g ~ 1 + neocortex,
prior = c(set_prior("uniform(-1000, 1000)", class = "Intercept"),
set_prior("uniform(-1000, 1000)", class = "b"),
set_prior("uniform(0, 100)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)
# Model with only log mass
Inits <- list(Intercept = mean(d$kcal.per.g),
`log(mass)` = 0,
sigma = sd(d$kcal.per.g))
InitsList <-list(Inits, Inits, Inits, Inits)
m6.13 <- brm(data = d, family = gaussian,
kcal.per.g ~ 1 + log(mass),
prior = c(set_prior("uniform(-1000, 1000)", class = "Intercept"),
set_prior("uniform(-1000, 1000)", class = "b"),
set_prior("uniform(0, 100)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)
# Model with both neocortex and log mass
Inits <- list(Intercept = mean(d$kcal.per.g),
neocortex = 0,
`log(mass)` = 0,
sigma = sd(d$kcal.per.g))
InitsList <-list(Inits, Inits, Inits, Inits)
m6.14 <-
brm(data = d, family = gaussian,
kcal.per.g ~ 1 + neocortex + log(mass),
prior = c(set_prior("uniform(-1000, 1000)", class = "Intercept"),
set_prior("uniform(-1000, 1000)", class = "b"),
set_prior("uniform(0, 100)", class = "sigma")),
chains = 4, iter = 2000, warmup = 1000, cores = 4,
inits = InitsList)
waic(m6.11, m6.12, m6.13, m6.14)
w.m6.11 <- waic(m6.11)
w.m6.12 <- waic(m6.12)
w.m6.13 <- waic(m6.13)
w.m6.14 <- waic(m6.14)
compare_ic(w.m6.11, w.m6.12, w.m6.13, w.m6.14)
tibble(model = c("m6.11", "m6.12", "m6.13", "m6.14"),
waic = c(w.m6.11$waic, w.m6.12$waic, w.m6.13$waic, w.m6.14$waic),
se = c(w.m6.11$se_waic, w.m6.12$se_waic, w.m6.13$se_waic, w.m6.14$se_waic)) %>%
ggplot() +
theme_classic() +
geom_pointrange(aes(x = model, y = waic,
ymin = waic - se,
ymax = waic + se),
shape = 21, color = "plum4", fill = "plum") +
coord_flip() +
labs(x = NULL, y = NULL,
title = "My custom WAIC plot") +
theme(text = element_text(family = "Courier"),
axis.ticks.y = element_blank())
library(broom)
my_coef_tab <-
rbind(tidy(m6.11), tidy(m6.12), tidy(m6.13), tidy(m6.14)) %>%
mutate(model = c(rep("m6.11", times = nrow(tidy(m6.11))),
rep("m6.12", times = nrow(tidy(m6.12))),
rep("m6.13", times = nrow(tidy(m6.13))),
rep("m6.14", times = nrow(tidy(m6.14))))
) %>%
filter(term != "lp__") %>%
select(model, everything()) %>%
complete(term = distinct(., term), model) %>%
rbind(
tibble(
model = NA,
term = c("b_logmass", "b_neocortex", "sigma", "b_Intercept"),
estimate = NA,
std.error = NA,
lower = NA,
upper = NA)) %>%
mutate(axis = ifelse(is.na(model), term, model),
model = factor(model, levels = c("m6.11", "m6.12", "m6.13", "m6.14")),
term = factor(term, levels = c("b_logmass", "b_neocortex", "sigma", "b_Intercept", NA))) %>%
arrange(term, model) %>%
mutate(axis_order = letters[1:20],
axis = ifelse(str_detect(axis, "m6."), str_c("      ", axis), axis))
ggplot(data = my_coef_tab,
aes(x = axis_order,
y = estimate,
ymin = lower,
ymax = upper)) +
theme_classic() +
geom_hline(yintercept = 0, color = "plum4", alpha = 1/8) +
geom_pointrange(shape = 21, color = "plum4", fill = "plum") +
scale_x_discrete(NULL, labels = my_coef_tab$axis) +
ggtitle("My coeftab() plot") +
coord_flip() +
theme(panel.grid = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_text(hjust = 0))
nd <-
tibble(neocortex = seq(from = .5, to = .8, length.out = 30),
mass = rep(4.5, times = 30))
ftd <-
fitted(m6.14, newdata = nd) %>%
as_tibble() %>%
bind_cols(nd)
pp_average(m6.11, m6.12, m6.13, m6.14,
weights = "waic",
method = "fitted",  # for new data predictions, use method = "predict"
newdata = nd) %>%
as_tibble() %>%
bind_cols(nd) %>%
ggplot(aes(x = neocortex, y = Estimate)) +
theme_classic() +
geom_ribbon(aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "plum", alpha = 1/3) +
geom_line(color = "plum2") +
geom_ribbon(data = ftd, aes(ymin = `2.5%ile`, ymax = `97.5%ile`),
fill = "transparent", color = "plum3", linetype = 2) +
geom_line(data = ftd,
color = "plum3", linetype = 2) +
geom_point(data = d, aes(x = neocortex, y = kcal.per.g),
size = 2, color = "plum4") +
labs(y = "kcal.per.g") +
coord_cartesian(xlim = range(d$neocortex),
ylim = range(d$kcal.per.g))
bayes_R2(m6.14) %>% round(digits = 3)
rbind(bayes_R2(m6.11),
bayes_R2(m6.12),
bayes_R2(m6.13),
bayes_R2(m6.14)) %>%
as_tibble() %>%
mutate(model = c("m6.11", "m6.12", "m6.13", "m6.14"),
r_square_posterior_mean = round(Estimate, digits = 2)) %>%
select(model, r_square_posterior_mean)
# model b6.13
m6.13.R2 <-
bayes_R2(m6.13, summary = F) %>%
as_tibble() %>%
rename(R2.13 = R2)
# model b6.14
m6.14.R2 <-
bayes_R2(m6.14, summary = F) %>%
as_tibble() %>%
rename(R2.14 = R2)
# Let's put them in the same data object
combined_R2s <-
bind_cols(m6.13.R2, m6.14.R2) %>%
mutate(dif = R2.14 - R2.13)
# A simple density plot
combined_R2s %>%
ggplot(aes(x = R2.13)) +
theme_classic() +
geom_density(size = 0, fill = "springgreen4", alpha = 2/3) +
geom_density(aes(x = R2.14),
size = 0, fill = "springgreen3", alpha = 2/3) +
scale_y_continuous(NULL, breaks = NULL) +
coord_cartesian(xlim = 0:1) +
labs(x = NULL,
title = expression(paste(italic("R")^{2}, " distributions")),
subtitle = "Going from left to right, these are for\nmodels m6.13 and m6.14.")
combined_R2s %>%
ggplot(aes(x = dif)) +
theme_classic() +
geom_density(size = 0, fill = "springgreen") +
geom_vline(xintercept = quantile(combined_R2s$dif,
probs = c(.025, .5, .975)),
color = "white", size = c(1/2, 1, 1/2)) +
scale_y_continuous(NULL, breaks = NULL) +
labs(x = expression(paste(Delta, italic("R")^{2})),
subtitle = "This is how much more variance, in terms\nof %, model b6.14 explained compared to\nmodel b6.13. The white lines are the\nposterior median and 95% percentiles.")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("tidyverse")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
